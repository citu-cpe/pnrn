// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                @id @default(uuid())
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  email                     String                @unique
  name                      String
  password                  String
  currentHashedRefreshToken String?
  roles                     Role[]
  isFirstLogin              Boolean               @default(true)
  Event                     Event[]
  Notification              Notification[]
  ActivityLog               ActivityLog[]
  PasswordResetTokens       PasswordResetTokens[]
}

enum Role {
  STAFF
  ADMIN
  ORGANIZER
}

model Schedule {
  id           String       @id @default(uuid())
  createdAt    DateTime?    @default(now())
  updatedAt    DateTime?    @updatedAt
  availability Availability
  startTime    DateTime
  endTime      DateTime
  Equipment    Equipment?   @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  equipmentId  String?
  Venues       Venues?      @relation(fields: [venuesId], references: [id])
  venuesId     String?
}

enum EquipmentType {
  PHOTO_DOCUMENTATION
  VIDEO_DOCUMENTATION
  PHOTO_AND_VIDEO_DOCUMENTATION
  LIVE_STREAMING
  MUSIC_BAND
  OTHERS
}

model Equipment {
  id                 String               @id @default(uuid())
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?            @updatedAt
  name               String               @unique
  type               EquipmentType
  brand              String?
  serial             String?
  notes              String?
  schedules          Schedule[]
  EquipmentsOnEvents EquipmentsOnEvents[]
}

model Venues {
  id             String           @id @default(uuid())
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @updatedAt
  name           String           @unique
  schedules      Schedule[]
  notes          String?
  VenuesOnEvents VenuesOnEvents[]
}

enum Availability {
  AVAILABLE
  UNAVAILABLE
}

model Organizer {
  id        String    @id @default(uuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  name      String    @unique
  type      Type
  Event     Event[]
}

model Announcement {
  id         String     @id @default(uuid())
  createdAt  DateTime?  @default(now())
  updatedAt  DateTime?  @updatedAt
  title      String
  subtitle   String?
  content    String
  tags       String[]
  viewAccess ViewAccess
}

enum ViewAccess {
  PUBLIC
  PRIVATE
}

enum Type {
  DEPARTMENT
  ORGANIZATION
  OTHERS
}

model Event {
  id              String     @id @default(uuid())
  createdAt       DateTime?  @default(now())
  updatedAt       DateTime?  @updatedAt
  title           String
  description     String?
  status          Status
  startTime       DateTime
  endTime         DateTime
  contactPerson   String
  contact         String     @default("")
  approvedBy      String?
  viewAccess      ViewAccess
  type            EventType
  additionalNotes String?

  organizer  Organizer            @relation(fields: [organizerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  venues     VenuesOnEvents[]
  equipments EquipmentsOnEvents[]
  encodedBy  User                 @relation(fields: [encodedById], references: [id], onDelete: Cascade, onUpdate: Cascade)

  organizerId String
  encodedById String
}

model VenuesOnEvents {
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId  String
  venue    Venues @relation(fields: [venuesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  venuesId String

  @@id([eventId, venuesId])
}

model EquipmentsOnEvents {
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId     String
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  equipmentId String

  @@id([eventId, equipmentId])
}

model ActivityLog {
  id           String         @id @default(uuid())
  action       Action
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  entityName   String
  entityId     String
  oldValue     String?
  newValue     String?
  executedAt   DateTime       @default(now())
  priority     Priority
  Notification Notification[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String
}

model Notification {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  unread        Boolean     @default(true)
  user          User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  activityLog   ActivityLog @relation(fields: [activityLogId], references: [id])
  activityLogId String
  userId        String
}

enum Priority {
  PUBLIC
  PRIVATE
  IMPORTANT
}

enum Action {
  ADDED
  EDITED
  DELETED
  RESERVED
  REGISTERED
}

enum Status {
  PENDING
  ONGOING
  RESERVED
  DONE
  CANCELED
  POSTPONED
}

enum EventType {
  CORPORATE
  ACADEMIC
  SEMINAR
  CONFERENCE
  CAMPUS_WIDE
  VIRTUAL
  SPORTS
  OTHERS
}

model PasswordResetTokens {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  token  String @unique

  @@id([userId, token])
}
