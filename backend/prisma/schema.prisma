// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String   @id @default(uuid())
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  email                     String   @unique
  name                      String
  password                  String
  currentHashedRefreshToken String?
  roles                     Role[]
  isFirstLogin              Boolean  @default(true)
  Event                     Event[]
}

enum Role {
  STAFF
  ADMIN
  ORGANIZER
}

model Schedule {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  availability Availability
  startTime    DateTime
  endTime      DateTime
  Equipment    Equipment?   @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  equipmentId  String?
  Venues       Venues?      @relation(fields: [venuesId], references: [id])
  venuesId     String?
}

model Equipment {
  id                 String               @id @default(uuid())
  name               String               @unique
  type               String
  brand              String?
  serial             String?
  notes              String
  schedules          Schedule[]
  EquipmentsOnEvents EquipmentsOnEvents[]
}

model Venues {
  id             String           @id @default(uuid())
  name           String
  schedules      Schedule[]
  notes          String
  VenuesOnEvents VenuesOnEvents[]
}

enum Availability {
  AVAILABLE
  UNAVAILABLE
}

model Organizer {
  id    String  @id @default(uuid())
  name  String  @unique
  type  Type
  Event Event[]
}

model Announcement {
  id         String     @id @default(uuid())
  title      String
  subtitle   String?
  content    String
  tags       String[]
  viewAccess ViewAccess
}

enum ViewAccess {
  PUBLIC
  PRIVATE
}

enum Type {
  DEPARTMENT
  ORGANIZATION
  OTHERS
}

model Event {
  id              String     @id @default(uuid())
  title           String
  description     String
  status          Status
  startTime       DateTime
  endTime         DateTime
  contactPerson   String
  contactNumber   String
  approvedBy      String
  viewAccess      ViewAccess
  type            EventType
  additionalNotes String?

  organizer  Organizer            @relation(fields: [organizerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  venues     VenuesOnEvents[]
  equipments EquipmentsOnEvents[]
  encodedBy  User                 @relation(fields: [encodedById], references: [id], onDelete: Cascade, onUpdate: Cascade)

  organizerId String
  encodedById String
}

model VenuesOnEvents {
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId  String
  venue    Venues @relation(fields: [venuesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  venuesId String

  @@id([eventId, venuesId])
}

model EquipmentsOnEvents {
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId     String
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  equipmentId String

  @@id([eventId, equipmentId])
}

enum Status {
  PENDING
  ONGOING
  RESERVED
  DONE
  CANCELED
  POSTPONED
}

enum EventType {
  CORPORATE
  ACADEMIC
  SEMINAR
  CONFERENCE
  CAMPUS_WIDE
  VIRTUAL
  SPORTS
  OTHERS
}
